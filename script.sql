-- Table: public.posto

-- DROP TABLE IF EXISTS public.posto;

CREATE TABLE IF NOT EXISTS public.posto
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    posto character varying(25) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT posto_pkey PRIMARY KEY (id),
    CONSTRAINT ukgpngcuh9qqvfmvbmtsf93339 UNIQUE (posto)
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.posto
    OWNER to admin;

-------------------------------------------------------------------
-- Table: public.oficial_civil

-- DROP TABLE IF EXISTS public.oficial_civil;

CREATE TABLE IF NOT EXISTS public.oficial_civil
(
    id integer NOT NULL,
    antiguidade integer NOT NULL,
    nome character varying(150) COLLATE pg_catalog."default" NOT NULL,
    posto_id integer NOT NULL,
    urlfoto character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT oficial_civil_pkey PRIMARY KEY (id),
    CONSTRAINT fkn9rp8bwe8vwucd858bjtbs278 FOREIGN KEY (posto_id)
    REFERENCES public.posto (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.oficial_civil
    OWNER to admin;

-- Trigger: trigger_check_shift_antiguidade

-- DROP TRIGGER IF EXISTS trigger_check_shift_antiguidade ON public.oficial_civil;

CREATE OR REPLACE TRIGGER trigger_check_shift_antiguidade
    BEFORE INSERT
    ON public.oficial_civil
    FOR EACH ROW
    EXECUTE FUNCTION public.check_and_shift_antiguidade();

---------------------------------------------------------------------

CREATE OR REPLACE FUNCTION check_and_shift_antiguidade()
RETURNS TRIGGER AS $$
BEGIN
    -- Se já existir um registro com a antiguidade igual ao novo valor
    IF EXISTS (SELECT 1 FROM public.oficial_civil WHERE antiguidade = NEW.antiguidade) THEN
        -- Atualiza todos os registros com antiguidade maior ou igual à nova antiguidade, incrementando +1
UPDATE public.oficial_civil
SET antiguidade = antiguidade + 1
WHERE antiguidade >= NEW.antiguidade;
END IF;

    -- Retorna o novo registro
RETURN NEW;
END;
$$ LANGUAGE plpgsql;
---------------------------------------------------------------------


CREATE TRIGGER trigger_check_shift_antiguidade
    BEFORE INSERT ON public.oficial_civil
    FOR EACH ROW
    EXECUTE FUNCTION check_and_shift_antiguidade();



ALTER TABLE IF EXISTS public.oficial_civil
    ADD COLUMN presenca BOOLEAN DEFAULT false;